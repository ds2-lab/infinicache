{
  
  "1": {
    "title": "Deployment",
    "content": "InfiniCache Deployment Instruction . Preparation . EC2 Proxy . Amazon EC2 AMI: ubuntu-xenial-16.04 . Golang version: 1.12 . Be sure the port 6378 - 7380 is avaiable on the proxy . We recommend that EC2 proxy and Lambda functions are under the same VPC network, and deploy InfiniCache on a EC2 instance with powerful CPU and high bandwidth (c5n family maybe a good choice). . | Golang install . Jump to install_go.md . | Package install . Install basic package . sudo apt-get update sudo apt-get -y upgrade sudo apt install awscli sudo apt install zip . Clone this repo . go get -u github.com/mason-leap-lab/infinicache . Run aws configure to setup your AWS credential. . aws configure . | Lambda Runtime . Lambda Role setup . Go to AWS IAM console and create a role for the lambda cache node (Lambda function). . AWS IAM console -&gt; Roles -&gt; Create Role -&gt; Lambda -&gt; . AWSLambdaFullAccess, . AWSLambdaVPCAccessExecutionRole, . AWSLambdaENIManagementAccess . | Enable Lambda internet access under VPC . Plese refer to this article. (You could skip this step if you do not want to run InfiniCache under VPC). . | S3 bucket setup . Create the S3 bucket to store the zip file of the Lambda code and data output from Lambda functions. Remember the name of this bucket for the configuration in next step. . | . | Configuration . Lambda function create and config . Edit deploy/create_function.sh and deploy/update_function.sh . PREFIX=&quot;your lambda function prefix&quot; S3=&quot;your bucket name&quot; cluster=400 # number of lambda in the cache pool mem=1536 . Edit destination S3 bucket in lambda/collector/collector.go, this bucket is for the bill duration log from CloudWatch. . AWSRegion = &quot;us-east-1&quot; S3BUCKET = &quot;your bucket name&quot; . Edit lambda/migrator/client.go, change AWS region if necessary. . AWSRegion = &quot;us-east-1&quot; . Edit the aws settings and the VPC configuration in deploy/deploy_function.go. If you do not want to run InfiniCache under VPC, you do not need to modify the subnet and securityGroup settings. . ROLE = &quot;arn:aws:iam::[aws account id]:role/[role name]&quot; REGION = &quot;us-east-1&quot; ... ... subnet = []*string{ aws.String(&quot;your subnet 1&quot;), aws.String(&quot;your subnet 2&quot;), } securityGroup = []*string{ aws.String(&quot;your security group&quot;) } . Run script to create and deploy lambda functions (Also, if you do not want to run InfiniCache under VPC, you need to set the vpc flag to be false in deploy/create_function.sh). . export GO111MODULE=&quot;on&quot; go get deploy/create_function.sh 60 . | Proxy configuration . Edit proxy/server/config.go, change the aws region, cluster size, and prefix of the Lambda functions. . const AWSRegion = &quot;us-east-1&quot; const NumLambdaClusters = 400 const LambdaPrefix = &quot;Your Lambda Function Prefix&quot; const ServerPublicIp = &quot;&quot; // Leave it empty if using VPC. . | . | . Execution . Proxy server . Run make start to start proxy server. make start would print nothing to the console. If you want to check the log message, you need to set the debug flag to be true in the proxy/proxy.go. . make start . To stop proxy server, run make stop. If make stop is not working, you could use pgrep proxy, pgrep go to find the pid, and check the infinicache pid and kill them. . | Client library . The toy demo for Client Library . go run client/example/main.go . The result should be . ~$ go run client/example/main.go 2020/03/08 05:05:19 EcRedis Set foo 14630930 2020/03/08 05:05:19 EcRedis Got foo 3551124 ( 2677371 865495 ) . | . Related repo . Client library ecRedis Redis protocol redeo Benchmarking tool redbench .",
    "url": "http://localhost:4000/docs/deploy/",
    "relUrl": "/docs/deploy/"
  }
  ,"2": {
    "title": "Home",
    "content": "InfiniCache . InfiniCache is a cost-effective memory cache that is built atop ephemeral serverless functions .  PAPER   TALK   CODE   SLIDE  POSTER . Press: . IEEE Spectrum: Cloud Services Tool Lets You Pay for Data You Use—Not Data You Store | Mikhail Shilkov’s detailed paper review: InfiniCache: Distributed Cache on Top of AWS Lambda (paper review) | . . What is InfiniCache . InfiniCache is a first-of-its-kind in-memory object caching system that is completely built and deployed atop ephemeral serverless functions. InfiniCache exploits and orchestrates serverless functions’ memory resources to enable elastic pay per-use caching. InfiniCache’s design combines erasure coding, intelligent billed duration control, and an efficient data backup mechanism to maximize data availability and cost effectiveness while balancing the risk of losing cached state and performance. . . Feature . The very first in-memory object caching system powered by ephemeral and “stateless” cloud functions. | Leverage several intelligent techniques to maxmize data availability, such as erasure coding periodic warm-up and periodic delta-sync techniques. | InfiniCache achieves performance comparable to ElastiCache (600GB cache capacity) for large objects and improves the cost effectiveness of cloud IMOCs by 31 – 96x. | . Service Performance Price . InfiniCache | Fast | Low | . ElastiCache | Fast | High | . S3 Object Store | Slow | Low | . . Contact . Please feel free to reach out us at if you have any questions about InfiniCache. . Contributing . Please feel free to hack on InfiniCache! We’re happy to accept contributions. . Thank you to the contributors of InfiniCache! . Acknowledgment . This work is sponsored in part by NSF, and AWS Cloud Research Grants. . .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  
}